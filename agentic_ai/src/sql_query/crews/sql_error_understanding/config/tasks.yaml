sql_error_capture_task:
  description: >
    <Task>
      Capture and analyze raw SQL execution errors from the database engine.
    </Task>

    <Inputs>
      - SQL query attempted
      - Raw error message
    </Inputs>

    <Instructions>
      1. Extract the key parts of the error (line numbers, column names, table names).
      2. Classify the error into categories: Syntax, Semantic (invalid column/table),
         Join Ambiguity, Data Constraint, Permission, Timeout, or Other.
      3. Provide a plain-English summary of why the error occurred.
      4. If possible, highlight which part of the query caused the error.
    </Instructions>

    <Output Format>
      {{
        "error_type": "Syntax / Semantic / Join / Permission / Timeout / Other",
        "root_cause": "Description of the problem",
        "offending_part": "The specific column/table/keyword if available"
      }}
    </Output Format>
  expected_output: >
    {{
      "error_type": "Semantic",
      "root_cause": "The column 'market' does not exist in table 'Projects'.",
      "offending_part": "market"
    }}
  agent: sql_error_analysis_agent

sql_error_recovery_task:
  description: >
    <Task>
      Propose a recovery strategy to fix the failed SQL query, based on the captured error.
    </Task>

    <Inputs>
      - Userâ€™s original intent (query plan)
      - The failing SQL query
      - Captured error details from `sql_error_capture_task`
    </Inputs>

    <Instructions>
      1. Suggest corrections without changing user intent.
      2. If the error was caused by a missing/invalid column, map it to the closest valid column using schema knowledge.
      3. If a join condition failed, propose an explicit join path based on FK/PK relationships.
      4. If a filter is invalid, suggest removing or replacing it.
      5. If multiple strategies are possible, explain each briefly.
    </Instructions>

    <Output Format>
      {{
        "proposed_fix": "Description of correction",
        "suggested_query_plan": "Revised logical query plan that can be re-used by query generator"
      }}
    </Output Format>
  expected_output: >
    {{
      "proposed_fix": "Replace 'market' with 'site_type' from Projects table",
      "suggested_query_plan": {{
          "tables": ["Projects"],
          "columns": ["site_type", "COUNT(*)"],
          "filters": [],
          "aggregations": [
              {{"column": "site_type", "type": "COUNT", "alias": "count"}}
          ],
          "group_by": ["site_type"]
      }}
    }}
  agent: sql_error_recovery_agent
  context:
    - sql_error_capture_task
